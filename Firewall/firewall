#!/system/xbin/bash
	##action and reaction are equal and opposite..so for every input there must be an equal output

	##Drop all Rules and clean the table;set all policies to allow
_my_dns_port=5353 #my dns server
_dns_port=55353
_trans_port=59040
iptables -F
#iptables -X
iptables -t nat -F
#iptables -t nat -X
iptables -t mangle -F
#iptables -t mangle -X
iptables -t raw -F
#iptables -t raw -X
iptables -P INPUT  ACCEPT
iptables -P FORWARD  ACCEPT
iptables -P OUTPUT  ACCEPT
	##Create New Chains
iptables -N angel-Allow
iptables -N angel-Forward
iptables -N angel-Output
iptables -N angel-Reject
   	#allow machine to talk to itself
iptables -A INPUT -i lo -j ACCEPT
iptables -A OUTPUT -o lo -j ACCEPT
	#allow ping requests
iptables -A INPUT -p icmp -j ACCEPT
iptables -A OUTPUT -p icmp -j ACCEPT
   	#allow dhcp for ip addressing in tethering
iptables -A angel-Allow -i ap0 -p udp --dport 67:68 -m state --state NEW -j ACCEPT
iptables -A angel-Output -o ap0 -p udp --sport 67:68 -j ACCEPT
   	#allow out dns requests
for i in udp tcp
do
	#enable outgoing queries to my dns server
	iptables -A angel-Output -m owner --uid-owner 0 -p $i --dport $_my_dns_port -j ACCEPT
	iptables -A angel-Output -m owner --uid-owner 0 -p $i --sport $_my_dns_port -j ACCEPT
	#enable dns queries on tether
	iptables -A angel-Allow -m owner --uid-owner 1052 -p $i --dport 53 -j ACCEPT
	iptables -A angel-Output -m owner --uid-owner 1052 -p $i --dport 53 -j ACCEPT
	iptables -A angel-Output -m owner --uid-owner 1052 -p $i --sport 53 -j ACCEPT
done

   	#enable adb on secure networks
iptables -A angel-Allow -i ap0 -p tcp --dport 5555 -j ACCEPT
iptables -A angel-Output -o ap0 -p tcp --sport 5555 -j ACCEPT
   	#allow ssh on all interfaces
iptables -A angel-Allow -p tcp -m multiport --dports 22,2222 -j ACCEPT
iptables -A angel-Output -p tcp -m multiport --sports 22,2222 -j ACCEPT
   	#allow http,https on all interfaces
iptables -A angel-Allow -p tcp -m multiport --dports 80,443 -j ACCEPT
iptables -A angel-Output -p tcp -m multiport --sports 80,443 -j ACCEPT
	#allow outgoing,incoming airdroid to trusted device
iptables -A angel-Allow -i ap0 -p tcp -d 192.168.43.1 --dport 8888 -s 192.168.43.2,192.168.43.3 --sport 8888:8900 -j ACCEPT
iptables -A angel-Allow -i ap0 -p tcp ! --dport 8888 -m owner --uid-owner 10068 -j ACCEPT
iptables -A angel-Output -o ap0 -m owner --uid-owner 10068 -j ACCEPT
        #check if to use tor
if [ "$1" == 1 ];then
	#anonymize middlebox
	iptables -t nat -A PREROUTING -i ap0 -p udp --dport 53 -j REDIRECT --to-ports $_dns_port
	iptables -t nat -A PREROUTING -i ap0 -p udp --dport $_dns_port -j REDIRECT --to-ports $_dns_port
	iptables -t nat -A PREROUTING -i ap0 -d 192.168.43.1/24 -j RETURN
	iptables -t nat -A PREROUTING -i ap0 -p tcp -j REDIRECT --to-ports $_trans_port



else
	iptables -t nat -A PREROUTING -i ap0 -m udp -p udp --dport 53 -j REDIRECT --to-ports $_my_dns_port
	iptables -t nat -A POSTROUTING -o ccmni0 -j MASQUERADE
fi

	#Control apps access as in file apps.txt
REGEX="[[:digit:]] [0-1] [0-1] [0-1] [0-1]"
while read -r i
do
	if [[ $i =~ $REGEX ]];then
		_app=$i
		_uid=$(echo $_app | cut -d " " -f 1)
		_ap0=$(echo $_app | cut -d " " -f 2)
		_wlan0=$(echo $_app | cut -d " " -f 3)
		_net=$(echo $_app | cut -d " " -f 4)
		_tor=$(echo $_app | cut -d " " -f 5)
		if [[ $_tor == 1 ]];then
			_net=0;_ap0=0;_wlan0=0 #DISABLE CLEARNET ON ALL INTERFACES
			iptables -t nat -A OUTPUT ! -o lo -p tcp -m owner --uid-owner $_uid -m tcp -j REDIRECT --to-ports $_trans_port
			iptables -A angel-Output -p tcp --dport $_trans_port -m owner --uid-owner $_uid -j ACCEPT
		fi
		if [[ $_ap0 == 1 ]];then
			for p in tcp udp
			do
				iptables -A angel-Allow -i ap0 -p $p -m owner --uid-owner $_uid -j ACCEPT
				iptables -A angel-Output -o ap0 -p $p -m owner --uid-owner $_uid -j ACCEPT
			done
		fi
		if [[ $_wlan0 == 1 ]];then
			for p in tcp udp
			do
				iptables -A angel-Allow -i wlan0 -p $p -m owner --uid-owner $_uid -j ACCEPT
				iptables -A angel-Output -o wlan0 -p $p -m owner --uid-owner $_uid -j ACCEPT
			done
		fi
		if [[ $_net == 1 ]];then
			for out_in in ccmni0 ccmni1
				do
					for p in tcp udp
					do
						iptables -A angel-Allow -i $out_in -p $p -m owner --uid-owner $_uid -j ACCEPT
						iptables -A angel-Output -o $out_in -p $p -m owner --uid-owner $_uid -j ACCEPT
					done
				done
		fi
	fi
done < /root/firewall/apps.txt

	##FORWARD RULES
	#forward dns requests to a my dns server which will complete the chain by to 1.1.1.1
iptables -t nat -A OUTPUT -m udp -p udp --dport 53 -m owner ! --uid-owner 10070 -j REDIRECT --to-ports $_my_dns_port
	#allow forward requests to support tethering
iptables -A angel-Forward -i ap0 -s 192.168.43.2 -o ccmni0 -j ACCEPT
iptables -A angel-Forward -i ccmni0 -o ap0 -d 192.168.43.2 -j ACCEPT
iptables -A angel-Forward -j angel-Reject

	##REJECT ALL NON-MATCHING
iptables -A angel-Reject -j NFLOG --nflog-prefix "Access Denied"
iptables -A angel-Reject -p tcp -j REJECT --reject-with tcp-reset
iptables -A angel-Reject -p udp -j REJECT --reject-with icmp-port-unreachable
iptables -A angel-Allow -j angel-Reject
iptables -A angel-Output -j angel-Reject

	##INPUT
iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
iptables -A INPUT -j angel-Allow
	##FORWARD
iptables -A FORWARD -m state --state ESTABLISHED,RELATED -j ACCEPT
iptables -A FORWARD -p icmp -j ACCEPT
iptables -A FORWARD -j angel-Forward
	##OUTPUT
iptables -A OUTPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
iptables -A OUTPUT -j angel-Output



	###DROP Everything Else including ipv6
iptables -P FORWARD DROP
iptables -P INPUT DROP
iptables -P OUTPUT DROP
ip6tables -P FORWARD DROP
ip6tables -P INPUT DROP
ip6tables -P OUTPUT DROP
