#!/system/xbin/bash -x
	##action and reaction are equal and opposite..since our policy is drop..so for every input there must be an equal output

##useful variables
#My custom DNS port...this is where all dns requests will be forwarded..use zero if none
_my_dns_port=0
#_my_dns_port=5353
# Tor's Dns
_tor_dns_port=55353
#Tor's Transport
_tor_trans_port=59040
#Tor's ID
_isolate_uid=10063
# Tor's VirtualAddrNetworkIPv4
_virt_addr="10.192.0.0/10"
#tethering interfaces
_teth_ifaces=(ap0 rndis0 bt-pan0)
#internet interfaces 
_internet_ifaces=(ccmni0 ccmni1)
#allowed apps file i.e file where apps with access are defined
_apps_allow=/root/apps.txt
#allowed ips file i.e file where ip addresses with access are defined
_ips_allow=/root/ips.txt
#ip addresses which should not be routed through tor
_non_tor="127.0.0.0/8 10.0.0.0/8 172.16.0.0/12 192.168.0.0/16"

function clean(){
	##Drop all Rules and clean the table;set all policies to allow
	iptables -F
	iptables -t nat -F
	iptables -t mangle -F
	iptables -t raw -F
	iptables -P INPUT  ACCEPT
	iptables -P FORWARD  ACCEPT
	iptables -P OUTPUT  ACCEPT
}

function modify_file(){
	#modify the files for authorization
	fil=$1
	old_value=$3
	new_value=$4
	if [[ "$2" == add ]];then
		sed -i "/$old_value/d" $fil
		echo "$new_value" >> $fil
	else
		sed -i "/$old_value/d" $fil
	fi	
	
}

function create(){
	##Create New Chains
	iptables -N angel-Allow
	iptables -N angel-Forward
	iptables -N angel-Output
	iptables -N angel-Reject
}


function begin(){
   		#allow machine to talk to itself
	iptables -A INPUT -i lo -j ACCEPT
	iptables -A OUTPUT -o lo -j ACCEPT

		#allow ping requests
	iptables -A INPUT -p icmp -j ACCEPT
	iptables -A OUTPUT -p icmp -j ACCEPT

   		#enable adb on secure networks
	iptables -A angel-Allow -i ap0 -p tcp --dport 5555 -j ACCEPT
	iptables -A angel-Output -o ap0 -p tcp --sport 5555 -j ACCEPT

   		#allow ssh on all interfaces
	iptables -A angel-Allow -p tcp -m multiport --dports 22,2222 -j ACCEPT
	iptables -A angel-Output -p tcp -m multiport --sports 22,2222 -j ACCEPT

   		#allow http,https on all interfaces
	iptables -A angel-Allow -p tcp -m multiport --dports 80,443 -j ACCEPT
	iptables -A angel-Output -p tcp -m multiport --sports 80,443 -j ACCEPT

		#allow tor uid to fully communicate
	iptables -A angel-Allow -m owner --uid-owner $_isolate_uid -j ACCEPT
	iptables -A angel-Output -m owner --uid-owner $_isolate_uid -j ACCEPT

		#allow outgoing,incoming airdroid to trusted device
	iptables -A angel-Allow -i ap0 -p tcp -d 192.168.43.1 --dport 8888 -s 192.168.43.2 --sport 8888:8900 -j ACCEPT
	iptables -A angel-Allow -i ap0 -p tcp ! --dport 8888 -m owner --uid-owner 10068 -j ACCEPT
	iptables -A angel-Output -o ap0 -m owner --uid-owner 10068 -j ACCEPT
		
		#allow outgoing dns requests to my dns_server if is set
	if [[ $_my_dns_port != 0 ]];then
		for i in udp tcp
		do
			iptables -A angel-Output -p $i --dport $_my_dns_port -j ACCEPT
			iptables -A angel-Output -p $i --sport $_my_dns_port -j ACCEPT
		done
		#forward dns requests to a my dns server which will complete the chain  to 1.1.1.1
		iptables -t nat -A OUTPUT -m udp -p udp --dport 53 -m owner ! --uid-owner $_isolate_uid -j REDIRECT --to-ports $_my_dns_port

	else
		for i in udp tcp
		do
			iptables -A angel-Output -p $i --dport 53 -j ACCEPT
			iptables -A angel-Output -p $i --sport 53 -j ACCEPT
		done	

	fi

	
}

function nat_tor(){
		#start/stop routing all traffic from tor
		#pass all nat traffic through tor if argument 1 is -A
		#anonymize middlebox
		
		### *nat PREROUTING (For middlebox)
		for i in ${_teth_ifaces[@]}
		do
			iptables -t nat $1 PREROUTING -d $_virt_addr -i $i -p tcp -m tcp --tcp-flags FIN,SYN,RST,ACK SYN -j REDIRECT --to-ports $_tor_trans_port
			iptables -t nat $1 PREROUTING -i $i -p udp --dport 53 -j REDIRECT --to-ports $_tor_dns_port
			for ips in $_non_tor
			do
				iptables -t nat $1 PREROUTING -i $i -d $ips -j RETURN
			done
			#*nat PREROUTING (For middlebox)
			iptables -t nat $1 PREROUTING -i $i -p tcp -m tcp --tcp-flags FIN,SYN,RST,ACK SYN -j REDIRECT --to-ports $_tor_trans_port
		done
}


function tor_control(){
	#ADD or DELETE ip from/to routing traffic through tor
	_ip=$2
	intf=$3
	iptables -t nat $1 PREROUTING -d $_virt_addr -i $i -s $_ip -p tcp -m tcp --tcp-flags FIN,SYN,RST,ACK SYN -j REDIRECT --to-ports $_tor_trans_port
	iptables -t nat $1 PREROUTING -i $i -s $_ip -p udp --dport 53 -j REDIRECT --to-ports $_tor_dns_port
	for ips in $_non_tor
	do
		iptables -t nat $1 PREROUTING -i $i -s $_ip -d $ips -j RETURN
	done
	#*nat PREROUTING (For middlebox)
	iptables -t nat $1 PREROUTING -i $i -s $_ip -p tcp -m tcp --tcp-flags FIN,SYN,RST,ACK SYN -j REDIRECT --to-ports $_tor_trans_port
}


function nat_control(){
	#add or delete ip to/from nat access
	_ip=$2
	intf=$3
	for proto in tcp udp
	do
		iptables -t nat $1 PREROUTING -i $intf -s $_ip -m $proto -p $proto --dport 53 -j REDIRECT --to-ports $_my_dns_port
	done
	iptables $1 angel-Forward -i $intf -s $_ip -j ACCEPT
	iptables $1 angel-Forward -o $intf -d $_ip -j ACCEPT
				
}


function nat_main(){
	#allow dhcp for ip addressing in tethering interfaces
	for i in ${_teth_ifaces[@]}
	do
		iptables $1 angel-Allow -i $i -p udp --dport 67:68 -m state --state NEW -j ACCEPT
		iptables $1 angel-Output -o $i -p udp --sport 67:68 -j ACCEPT

	done
	#check if all nat should go through tor
	if [[ "$1" == "tor" ]];then
		nat_tor -A
	else		
		#anonymize ip(s) with tor flag on, in ip files
		REGEX="^[^#].*$"
		while read -r ips
		do
			if [[ $ips =~ $REGEX ]];then
				_ip=`echo $ips|cut -d "," -f 1`
				_tor=`echo $ips|cut -d "," -f 2`
				_int_face=`echo $ips|cut -d "," -f 3-`
				if [[ "$_tor" == "1" ]];then
					for intf in $_int_face
					do
					add_to_tor -A $_ip $intf
					done
				else
					#allow clearnet traffic
					for intf in  $_int_face
					do
						nat_control -A $_ip $intf
					done
				fi
			fi
		done <$_ips_allow		
		for i in ${_internet_ifaces[@]}
		do
			iptables -t nat $1 POSTROUTING -o $i -j MASQUERADE
		done	
		iptables $1 FORWARD -p icmp -j ACCEPT
	fi
}


function app_control(){
	_uid=$2
	intf=$3
	for p in tcp udp
	do
		if [[ "$intf" == "" ]];then
		iptables $1 angel-Output -p $p -m owner --uid-owner $_uid -j ACCEPT
		else
		iptables $1 angel-Output -o $intf -p $p -m owner --uid-owner $_uid -j ACCEPT
		fi
	done
}
function tor_app_control(){
	_uid=$2
	iptables -t nat $1 OUTPUT ! -o lo -p tcp -m owner --uid-owner $_uid -m tcp -j REDIRECT --to-ports $_tor_trans_port
	iptables -t nat $1 OUTPUT -d $_virt_addr -m owner --uid-owner $_uid -p tcp -j REDIRECT --to-ports $_tor_trans_port
	iptables -t nat $1 OUTPUT -d $_virt_addr -m owner --uid-owner $_uid -p udp -j REDIRECT --to-ports $_tor_trans_port
	iptables -t nat -A OUTPUT ! -o lo -p udp -m owner --uid-owner $_uid -m udp --dport 53 -j REDIRECT --to-ports $_tor_dns_port
	iptables $1 angel-Output -p tcp --dport $_tor_trans_port -m owner --uid-owner $_uid -j ACCEPT

	
}


function app_main(){
	#Control apps access file
	REGEX="^[^#].*$"
	while read line
	do
	if [[ $line =~ $REGEX ]];then
		_uid=`echo $line|cut -d "," -f 1`
		_tor=`echo $line|cut -d "," -f 2`
		_int_face=`echo $line|cut -d "," -f 3-`
	
		if [[ $_tor == 1 ]];then
			#disable clearnet 
			tor_app_control -A $_uid
		else
			if [[ "$_int_face" == "" ]];then
				app_control -A $_uid $intf
			else
				for intf in $_int_face
				do
					app_control -A $_uid $intf
				done
			fi
		fi
	fi
	done <$_apps_allow
}


function end(){
		##REJECT ALL NON-MATCHING
	iptables -A angel-Reject -j NFLOG --nflog-prefix "Access Denied"
	iptables -A angel-Reject -p tcp -j REJECT --reject-with tcp-reset
	iptables -A angel-Reject -p udp -j REJECT --reject-with icmp-port-unreachable
	iptables -A angel-Allow -j angel-Reject
	iptables -A angel-Forward -j angel-Reject
	iptables -A angel-Output -j angel-Reject
		##INPUT
	iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
	iptables -A INPUT -j angel-Allow
		##FORWARD
	iptables -A FORWARD -m state --state ESTABLISHED,RELATED -j ACCEPT
	iptables -A FORWARD -j angel-Forward
		##OUTPUT
	iptables -A OUTPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
	iptables -A OUTPUT -j angel-Output
		###DROP Everything Else including ipv6
	iptables -P FORWARD DROP
	iptables -P INPUT DROP
	iptables -P OUTPUT DROP
	ip6tables -P FORWARD DROP
	ip6tables -P INPUT DROP
	ip6tables -P OUTPUT DROP
}

function help(){
name=`basename "$0"`
echo -e "USAGE: $name Target [Options]
Small api to interact with firewall.
valid Targets::
 app
 ip
 tor
Options:::
 app,
	 enable app_uid interface ##Enable an app on the given interface(s) multiple can be specified with comma
	 disable app_uid interface ##Disable an app for accessing data in a interface(s) multiple can be specified with comma
	 torify app_uid start ##start routing all traffic regardless of an interface through tor
	 torify app_uid stop ##start routing all traffic regardless of an interface through tor
 nat,
	 enable ip_addr interface quota #quota can be left out if not required
	 disable ip_addr interface quota 
	 torify ip_addr interface
	 start #allow tethering
	 stop #stop tethering
 tor,
 	 start ##start routing all phone traffic through tor
	 stop  ##stop routing all phone traffic through tor

N.B order of options is required
Examples:
$name app enable 10070
$name app torify 10063 start
$name tor start
$name nat enable 192.168.43.1 ap0
$name nat enable 192.168.42.1 rndis0 1 #1 is for torify
"
}
if [[ $# -gt 0 ]] && [[ "$1" == "--help" || "$1" == "-h" || "$1" == "help" ]];then
	help
elif [[ "$1" == "app" ]];then
	action="$2"
	_uid="$3"
	interface=`echo $4|tr ',' ' '`
	
	if [[ "$action" == "" ]];then
		echo missing action
		exit 1
	elif [[ "$action" == "enable" ]];then
		echo enabling $uid
		for intf in ${interface:-?}
		do
			app_control -D $_uid `echo $intf|tr -d ?`
			app_control -I $_uid `echo $intf|tr -d ?`
		done
		modify_file $_apps_allow add $_uid "$_uid,0,$interface"

	elif [[ "$action" == "disable" ]];then
		echo disabling $uid
		for intf in ${interface:-?}
		do
			app_control -D $_uid `echo $intf|tr -d ?`
		done
		modify_file $_apps_allow del $_uid 

	elif [[ "$action" == "torify" ]];then
		if [[ "$4" == "start" ]];then
			echo start torifying $uid
			tor_app_control -I $_uid
			modify_file $_apps_allow add $_uid "$_uid,1"	
		elif [[ "$4" == "stop" ]];then
			echo stop torifying $uid
			tor_app_control -D $_uid
			modify_file $_apps_allow del "$_uid,1"
		else
			echo "invalid option"
			exit 1
		fi
		 
	else
		echo "invalid app action"
		exit 1
	fi
elif [[ "$1" == "nat" ]];then
	action="$2"
	ip="$3"
	interface="$4"
	quota="$5"
	if [[ "$action" == "" ]];then
		echo missing action
	elif [[ "$action" == "enable" ]];then
		echo "enabling ip"
	elif [[ "$action" == "disable" ]];then
		echo "disabling ip"
	elif [[ "$action" == "torify" ]];then
		echo "torifying"
	else
		echo "invalid ip option"
	fi
elif [[ "$1" == "tor" ]];then
	action="$2"
	uid="$3"
	if [[ "$action" == "" ]];then
		echo "missing action"
		exit 1
	elif [[ "$action" == "start" ]];then
		echo "starting full tor"
		clean
		create
		begin
		nat_tor -A
		end
	elif [[ "$action" == "stop" ]];then
		echo "stopping ful tor"
		nat_tor -D
	else
		echo "invalid tor option"
		exit 1
	fi
else
	clean
	create
	begin
	app_main
	end
fi
